from aiohttp import webimport timeimport syssys.path.append('../../')from common import helperfrom aiohttp_session import get_sessionimport jsonfrom models import userconfigWebCode=helper.getCode("web")configWebServer=helper.getServer("web")async def authToken(token,request):    aes = helper.AESCipher()    try:        res=aes.decrypt(token)    except e:        web.json_response({'code':configWebCode['NUll_VOID_TOKEN']})        return False    obj = json.loads(res)    #判断是否过期    diffTime = int(time.time())-int(obj['time'])    if diffTime > int(configWebServer['token_expire']) :        web.json_response({'code':configWebCode['EXPIRE_TOKEN']})        return False    #拉取用户信息    userModel = user.UserModel(request['pool'])    userInfo = await userModel.getUserInfo(obj.uid)    if not userInfo:        web.json_response({'code':configWebCode['USER_NOT_FOUND']})        return False    return userInfoclass HulaApi:    async def gate(self,request):        postData=await request.post()        token = postData['token']        aes = helper.AESCipher()        #验证token是否有效        try:            res=aes.decrypt(token)        except e:            web.json_response({'code':configWebCode['NUll_VOID_TOKEN']})        web.json_response({'code':configWebCode['RES_OK'],'host':configWebServer['socket_host'],'port':configWebServer['socket_port']})    async def login(self,request):        postData=await request.post()        uid=postData['uid']        t=int(time.time())        user_key=str(uid)+'|'+str(t)        aes = helper.AESCipher()        token=aes.encrypt(user_key)        session = await get_session(request)        session['uid']= uid        session['expire'] = t        web.json_response({'code':configWebCode['RES_OK'],'token':token})    async def createRoom(self,request):        postData=await request.post()        token = postData['token']        userinfo = await authToken(token,request)        if userinfo:            pass