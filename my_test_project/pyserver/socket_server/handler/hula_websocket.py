from aiohttp import webimport structimport jsonimport sysfrom protocol import test_pb2stick_package_stack = Noneasync def wshandler(request):    resp =web.WebSocketResponse()    await resp.prepare(request)    try:        if resp not in request.app['sockets']:            request.app['sockets'].append(resp)        async for raw in resp:            if raw.type == web.WSMsgType.binary:                await receive(raw.data,resp)        return resp    finally:        request.app['sockets'].remove(resp)async def receive(data,resp):    global stick_package_stack    if stick_package_stack:        data = stick_package_stack + data        stick_package_stack = None    print(data)    size, = struct.unpack('>i', data[:4])    raw_size = len(data)-8    print(raw_size)    print(size)    if raw_size > size: # 至少有一个包        cmd, = struct.unpack('>i', data[4:8])        msg,  = struct.unpack('>{0}s'.format(size), data[8:size+8])        await parse(cmd,msg,resp)        rest = data[size:]        receive(rest)    elif size > raw_size:  # 半包        stick_package_stack = data    elif size == raw_size:        cmd, = struct.unpack('>i', data[4:8])        msg,  = struct.unpack('>{0}s'.format(size), data[8:size+8])        await parse(cmd,msg,resp)    else:        passasync def parse(cmd,msg,resp):    print(cmd)    print(msg)    #msg.rstrip('\x00')    #msg = msg.decode("utf-8").rstrip('\x00')    proto = test_pb2.TestRequest()    proto.ParseFromString(msg)    await send(resp)    print(proto.name)    print(proto.age)    passasync def send(resp):    proto = test_pb2.TestResponse()    proto.nums=12    proto.memberId=1001    bufferStr= proto.SerializeToString()    lenb =len(bufferStr)    print('------')    print(lenb)    fmt = ">ii{0}s".format(lenb)    cmd=0x0002    data = struct.pack(fmt, lenb, cmd, bufferStr)    await resp.send_bytes(data)async def on_shutdown(app):    for ws in app['sockets']:        await ws.close()